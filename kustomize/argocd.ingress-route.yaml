# apiVersion: traefik.containo.us/v1alpha1
# kind: IngressRoute
# metadata:
#   name: argocd-server
#   namespace: argocd
# spec:
#   entryPoints:
#     # - websecure
#     - web
#   routes:
#     - kind: Rule
#       match: Host(`argocd.k3s`)
#       priority: 10
#       services:
#         - name: argocd-server
#           port: 80
#     - kind: Rule
#       match: Host(`argocd.k3s`) && Headers(`Content-Type`, `application/grpc`)
#       priority: 11
#       services:
#         - name: argocd-server
#           port: 80
#           scheme: h2c
#   # tls:
#   #   certResolver: le
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
 name: argocd.k3s-ingress
 namespace: argocd
 annotations:
  traefik.ingress.kubernetes.io/router.entrypoints: web
#  annotations:
  #  cert-manager.io/issuer: letsencrypt-staging-issuer
spec:
 tls:
   - hosts:
       - argocd.k3s
    #  secretName: treafik-ingress-http-staging
 rules:
   - host: argocd.k3s
     http:
       paths:
         - path: /
           pathType: Prefix
           backend:
             service:
               name: argocd-server
               port:
                 number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
 name: argocd.roelvandegrint.com-ingress
 namespace: argocd
 annotations:
  traefik.ingress.kubernetes.io/router.entrypoints: websecure
  cert-manager.io/issuer: letsencrypt-staging-http
spec:
 tls:
   - hosts:
       - argocd.roelvandegrint.com
     secretName: argocd-ingress-http-staging
 rules:
   - host: argocd.roelvandegrint.com
     http:
       paths:
         - path: /
           pathType: Prefix
           backend:
             service:
               name: argocd-server
               port:
                 number: 80
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
 name: letsencrypt-staging-http
 namespace: argocd
spec:
 acme:
   email: roelvandegrint@gmail.com
   # We use the staging server here for testing to avoid hitting
   server: https://acme-staging-v02.api.letsencrypt.org/directory
   privateKeySecretRef:
     # if not existing, it will register a new account and stores it
     name: letsencrypt-staging-issuer-account-key
   solvers:
     - http01:
         # The ingressClass used to create the necessary ingress routes
         ingress:
           class: traefik
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
 name: letsencrypt-production-http
 namespace: argocd
spec:
 acme:
   email: roelvandegrint@gmail.com
   # We use the staging server here for testing to avoid hitting
   server: https://acme-v02.api.letsencrypt.org/directory
   privateKeySecretRef:
     # if not existing, it will register a new account and stores it
     name: letsencrypt-production-issuer--account-key
   solvers:
     - http01:
         # The ingressClass used to create the necessary ingress routes
         ingress:
           class: traefik