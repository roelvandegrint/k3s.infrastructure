# apiVersion: traefik.containo.us/v1alpha1
# kind: IngressRoute
# metadata:
#   name: traefik-dashboard-roel
# spec:
#   entryPoints:
#     - web
#   routes:
#   - match: Host(`traefik.roelvandegrint.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
#     kind: Rule
#     services:
#     - name: api@internal
#       kind: TraefikService
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
 name: letsencrypt-staging-issuer
 namespace: kube-system
spec:
 acme:
   email: roelvandegrint@gmail.com
   # We use the staging server here for testing to avoid hitting
   server: https://acme-staging-v02.api.letsencrypt.org/directory
   privateKeySecretRef:
     # if not existing, it will register a new account and stores it
     name: letsencrypt-staging-issuer-account-key
   solvers:
     - http01:
         # The ingressClass used to create the necessary ingress routes
         ingress:
           class: traefik
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
 name: letsencrypt-production-issuer
 namespace: kube-system
spec:
 acme:
   email: roelvandegrint@gmail.com
   # We use the staging server here for testing to avoid hitting
   server: https://acme-v02.api.letsencrypt.org/directory
   privateKeySecretRef:
     # if not existing, it will register a new account and stores it
     name: letsencrypt-production-issuer-account-key
   solvers:
     - http01:
         # The ingressClass used to create the necessary ingress routes
         ingress:
           class: traefik
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
 name: treafik.roelvandegrint.com-ingress
 namespace: kube-system
 annotations:
   cert-manager.io/issuer: letsencrypt-staging-issuer
spec:
 tls:
   - hosts:
       - treafik.roelvandegrint.com
     secretName: treafik-ingress-http-staging
 rules:
   - host: k3s.roelvandegrint.com
     http:
       paths:
         - path: /
           pathType: Prefix
           backend:
             service:
               name: traefik
               port:
                 name: '80'